#include <opencv2/core/core.hpp>                        
#include <opencv2/highgui/highgui.hpp>                    
#include "opencv2/objdetect/objdetect.hpp" 
#include "opencv2/imgproc/imgproc.hpp" 
#include <string> 
#include <iostream> 
 
using namespace cv; 
using namespace std; 
 
string face_cascade_name = "haarcascade_frontalface_alt.xml";   
CascadeClassifier face_cascade;                               
string window_name = "Hello Face !"; 
const string img_name = "PORTRET.jpg"; 
 
void detectFace( Mat img ); 
 
int main( int argc, char** argv ) 
{ 
    Mat img;                                           
    img = imread( img_name );                            
    if ( !img.data )                                    
    { 
        cout << "Nie znaleziono pliku " <<  img_name << "."; 
        return -1; 
    } 
    if( !face_cascade.load( face_cascade_name ) )       
    { 
        cout << "Nie znaleziono pliku " << face_cascade_name << "."; 
        return -2; 
    } 
    namedWindow(window_name, CV_WINDOW_AUTOSIZE);    
    detectFace(img); 
    waitKey(0);                                            
    return 0; 
} 
 
void detectFace( Mat img ) 
{ 
    vector<Rect> faces;                           
    Mat img_gray;                               
 
    cvtColor(img, img_gray,  CV_BGR2GRAY );              
    //equalizeHist(img_gray, img_gray);                   
    face_cascade.detectMultiScale(img_gray, faces, 1.1, 3, 0|CV_HAAR_SCALE_IMAGE, Size(50, 50) ); 
    for( unsigned i = 0; i < faces.size(); i++ ) 
    { 
        Rect rect_face( faces[i] );    
        //ellipse( img, center, Size( faces[i].width*0.5, faces[i].height*0.5), 0, 0, 360, Scalar( 255, 120, 12 ), 2, 2, 0 ); 
        rectangle(img, rect_face, Scalar( 120, 5, 86 ), 2, 2, 0  ); 
    } 
    imshow(window_name, img);                        